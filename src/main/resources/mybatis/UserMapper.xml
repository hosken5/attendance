<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yimei.attendance.repository.UserRepository">

    <resultMap id="BaseResultMap" type="User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="loginname" property="loginname" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="register_date" property="registerDate" jdbcType="TIMESTAMP"/>
        <result column="created_by" property="createdBy" jdbcType="VARCHAR"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="last_modified_by" property="lastModifiedBy" jdbcType="VARCHAR"/>
        <result column="last_modified_date" property="lastModifiedDate" jdbcType="TIMESTAMP"/>
        <result column="activated" property="activated" jdbcType="BIT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, loginname, name, password, salt, email, register_date, created_by, created_date,
        last_modified_by, last_modified_date, activated
    </sql>



    <insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into user (id, loginname, name,
        password, salt,
        email, register_date, created_by,
        created_date, last_modified_by, last_modified_date,
        activated)
        values (#{id,jdbcType=BIGINT}, #{loginname,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR}, #{registerDate,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=VARCHAR},
        #{createdDate,jdbcType=TIMESTAMP}, #{lastModifiedBy,jdbcType=VARCHAR}, #{lastModifiedDate,jdbcType=TIMESTAMP},
        #{activated,jdbcType=BIT})
    </insert>

    <update id="update" parameterType="User">
        update user
        set loginname = #{loginname,jdbcType=VARCHAR},
        name = #{name,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        salt = #{salt,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        register_date = #{registerDate,jdbcType=TIMESTAMP},
        created_by = #{createdBy,jdbcType=VARCHAR},
        created_date = #{createdDate,jdbcType=TIMESTAMP},
        last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},
        last_modified_date = #{lastModifiedDate,jdbcType=TIMESTAMP},
        activated = #{activated,jdbcType=BIT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByIdSelective" parameterType="User">
        update user
        <set>
            <if test="loginname != null">
                loginname = #{loginname,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="salt != null">
                salt = #{salt,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="registerDate != null">
                register_date = #{registerDate,jdbcType=TIMESTAMP},
            </if>
            <if test="createdBy != null">
                created_by = #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="createdDate != null">
                created_date = #{createdDate,jdbcType=TIMESTAMP},
            </if>
            <if test="lastModifiedBy != null">
                last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},
            </if>
            <if test="lastModifiedDate != null">
                last_modified_date = #{lastModifiedDate,jdbcType=TIMESTAMP},
            </if>
            <if test="activated != null">
                activated = #{activated,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>


    <resultMap id="UserRoleMap" type="User">
        <id property="id" column="id"/>
        <result property="id" column="id"/>
        <result property="loginname" column="loginname"/>
        <result property="email" column="email"/>
        <collection property="roles" javaType="ArrayList"  ofType="Role">
            <result property="id" column="roleId"/>
            <result property="name" column="rolename"/>
            <result property="code" column="rolecode"/>
        </collection>
    </resultMap>

    <select id="findAllCount" resultType="int">
        select count(1) from user
        <where>
            <if test="loginname!=null and '' != loginname">loginname like "%"#{loginname}"%"</if>
        </where>
    </select>

    <select id="findAll" resultMap="UserRoleMap">
        select u.id,u.loginname,u.email,r.id roleId,r.name rolename,r.code rolecode from (select u.id,u.loginname,u.email from user u
        <where>
            <if test="loginname!=null and '' !=loginname">u.loginname like "%"#{loginname}"%"</if>
        </where>  limit #{page.pageSize} offset #{page.offset} ) u
        left join userrole ur on  u.id=ur.userId
        left join role r on r.id =ur.roleid
    </select>


    <select id="findUserAndRoleById" resultMap="UserRoleMap" parameterType="long">
        select u.id,u.loginname,u.email,r.id roleId,r.name rolename,r.code rolecode from  user u
        left join userrole ur on  u.id=ur.userId
        left join role r on r.id =ur.roleid
        where u.id=#{value}
    </select>
</mapper>
